self.addEventListener("install",()=>{self.skipWaiting()});self.addEventListener("activate",t=>{t.waitUntil(self.clients.claim())});self.addEventListener("push",t=>{if(console.log("[SW] Push event received",t),!t.data){console.log("[SW] No push data");return}let o={};try{o=t.data.json(),console.log("[SW] Parsed push payload",o)}catch(e){console.error("[SW] Failed to parse push payload",e)}const i=o.title||"Zettly",n={body:o.body||"",icon:o.icon||"/android-chrome-192x192.png",badge:o.badge||"/android-chrome-192x192.png",data:{url:o.url||"/",...o.data},tag:o.tag||"zettly",renotify:o.renotify??!1,requireInteraction:o.requireInteraction??!1};console.log("[SW] Showing notification:",i,n),t.waitUntil(self.registration.showNotification(i,n).then(()=>console.log("[SW] Notification shown successfully")).catch(e=>console.error("[SW] Failed to show notification",e)))});self.addEventListener("notificationclick",t=>{t.notification.close();const o=t.notification.data?.url||"/";t.waitUntil(clients.matchAll({type:"window",includeUncontrolled:!0}).then(i=>{for(const n of i)if("focus"in n){const e=new URL(n.url,self.location.origin),a=new URL(o,self.location.origin);if(e.pathname===a.pathname)return n.focus()}if(clients.openWindow)return clients.openWindow(o)}))});
